1. project setup. (installed some dependencies, nodemon setup and server starting on port 3000)

2. Mongodb atlas setup

   1. create account on mongodb atlas
   2. create cluster
   3. put connection string with password in the .env file
   4. allow network access from anywhere

3. create db connection

   1. create db/connectDB.js
   2. connect to db using mongoose client
   3. keep in mind to import dotenv package

4. create auth routes

   1. auth routes file inside routes folder
   2. create several routed for signup and login apis

5. create auth.controller.js file

   1. create api for handling signup and login features
      // DATED: 19 january 2025
   2. create signup, login and logout controller actions.
   3. call these controller actions in routes file.

6. create models folder

   1. create user model file.
   2. import mongoose
   3. create userSchema using mongoose
   4. create User Model using mongoose

7. signup controller implementation.

   1. get data filled by the user on browser in the form of request body
   2. add middleware to allow us to parse incoming requests with json payloads.
   3. set jwt token in the cookies
   4. send verification email using mailtrap client.

8. verify email api implementation.

   1. create route
   2. create controller method verify email
   3. send welcome email

9. logout api implementation
   1. clear the token cookie from user's browser

10. Login api
   1. check for credential are valid
   2. generate jwt token
   3. set token in the cookies
   4. redirect to the home page

11. Forget password api
   1. create forgot password api
   2. send email to user with reset password url, by attaching reset password token ( used crypto to create token )
   3. create reset password api
   4. check if reset password token is valid then update user's passoword
   5. send password reset successful email to user.

12. Check Auth api
   1. created route and added verifyToken middleware function
   2. in verifyToken : 
      [-] decoded the jwt token with the help of jwt.verify. [app.use(cookieParser())]
      [-] compared the decoded.userId and req.userId
      [-] after that we called the next()
   3. in checkAuth : 
      [-] fetched the userData using req.userId 
      [-] send the response 